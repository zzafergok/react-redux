Immutable ve mutable?

Js te objeler ve arryler referans tipli veri tipleri oldugu icin reducerdan bir statei return ettgimizde referansin
isaret ettigi memorydeki alani komple degistirmemiz gerekiyormus. O anki kopyasini alip uzerine degisikligi yapip tekradan
return etmemiz gerekiyormus. Bunu Js te yapabilmemiz icinde uygulamamizi reduxta immutable gelistirme yapmamiz gerekiyormus.

oncelikle bir redux icersinden bir store import ediyoruz ve bir reducer olusturarak switch case yapisi ile icersine stateleri
ekliyoruz. Sonrasin store oluturarak reducer i parametre olarak donuyoruz. sonrasinda store a subscribe ekleyerek consoledan 
ciktimizi takip ediyoruz.

import {createStore} from 'redux';

const initialState = {
  count:1,
  users:[]
};

const reducer = (state = initialState, action) => {
  switch (action.type){
    case"ADD":
      state += action.payload;
      break;
    case "SUBTRACT":
      state -= action.payload;
      break;
  }
  return state;
}

const store = creatStore(reducer, 1);

store.subscribe(()=>{
  console.log("store updated!", store.getState());
});

store.dispatch({
  type:"ADD",
  payload: 1
});
store.dispatch({
  type:"ADD",
  payload: 10
});
store.dispatch({
  type:"SUBTRACT",
  payload: 5
});

YUKARIDA KULLANILAN TIP IMMUTABLE BIR SISTEMDIR BUNU KULLANMAMAMIZ GEREKIYOR CUNKU BURDA KULLANCI EN SON NE ISLEM
YAPTIYSA ONU GORMUS OLUYORUZ ESKIYE DONUK HIC BIR HAREKETI GOREMEYEBILIRIZ.


import {createStore} from 'redux';

const initialState = {
  count:1,
  users:[]
};

const reducer = (state = initialState, action) => {
  switch (action.type){
    case"ADD":
      state = {
        ...state,
        count: state.count + action.payload
      };
      break;
    case "SUBTRACT":
      state = {
        ...state,
        count: state.count - action.payload
      };
      break;
  }
  return state;
}

const store = creatStore(reducer, 1);

store.subscribe(()=>{
  console.log("store updated!", store.getState());
});

store.dispatch({
  type:"ADD",
  payload: 1
});
store.dispatch({
  type:"ADD",
  payload: 10
});
store.dispatch({
  type:"SUBTRACT",
  payload: 5
});

